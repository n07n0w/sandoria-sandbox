name: Deploy to EC2

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ${{ secrets.EC2_USER }}
          SSH_PASSWORD: ${{ secrets.EC2_PASSWORD }}
        run: |
          # Install sshpass for password authentication
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Create deployment script
          cat > deploy.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "üöÄ Starting deployment..."

          # Define variables
          APP_DIR="/home/$SSH_USER/sandoria-sandbox"
          REPO_URL="https://github.com/${{ github.repository }}.git"

          # Install required packages if not present
          echo "üì¶ Checking system dependencies..."
          if ! command -v node &> /dev/null; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
          fi

          if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo apt-get update
              sudo apt-get install -y git
          fi

          if ! command -v mysql &> /dev/null; then
              echo "Installing MySQL..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server
              sudo systemctl start mysql
              sudo systemctl enable mysql
          fi

          if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
          fi

          # Clone or update repository
          if [ -d "$APP_DIR" ]; then
              echo "üì• Updating existing repository..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/${{ github.ref_name }}
          else
              echo "üì• Cloning repository..."
              mkdir -p "$(dirname "$APP_DIR")"
              git clone "$REPO_URL" "$APP_DIR"
              cd "$APP_DIR"
              git checkout ${{ github.ref_name }}
          fi

          # Install dependencies
          echo "üì¶ Installing Node.js dependencies..."
          npm install --production

          # Setup MySQL database and user
          echo "üóÑÔ∏è  Setting up MySQL database..."
          DB_USER="sandboxuser"
          DB_PASSWORD="sandbox_secure_pass_$(date +%s)"
          DB_NAME="sandbox"

          # Create database and user
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
          sudo mysql -e "CREATE USER IF NOT EXISTS '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
          sudo mysql -e "FLUSH PRIVILEGES;"

          echo "‚úÖ Database and user created"

          # Import backup if exists
          if [ -f "$APP_DIR/DB/timeweb.sandbox.sql" ]; then
              echo "üì• Importing database backup from DB/timeweb.sandbox.sql..."
              sudo mysql ${DB_NAME} < "$APP_DIR/DB/timeweb.sandbox.sql"
              echo "‚úÖ Database backup imported successfully"
          elif [ -f "$APP_DIR/DB/sandbox.sql" ]; then
              echo "üì• Importing database schema from DB/sandbox.sql..."
              sudo mysql ${DB_NAME} < "$APP_DIR/DB/sandbox.sql"
              echo "‚úÖ Database schema imported successfully"
          else
              echo "‚ö†Ô∏è  No database backup found, skipping import"
          fi

          # Setup environment file
          echo "‚öôÔ∏è  Creating .env file..."
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "localhost")

          cat > .env << ENV_FILE
            # Database Configuration
            DB_HOST=localhost
            DB_PORT=3306
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            
            # Application URLs
            BASE_URL=http://${PUBLIC_IP}:3000
            MAIN_SITE_URL=https://sandoria.org/
            
            # Server Configuration
            PORT=3000
            NODE_ENV=production
            
            # PeerJS Server Configuration
            PEER_SERVER_HOST=peer-server.sandoria.org
            PEER_SERVER_PORT=80
            PEER_SERVER_PATH=/
            PEER_SERVER_SECURE=false
            ENV_FILE

          echo "‚úÖ Environment file created with database credentials"

          # Stop existing PM2 process if running
          echo "üîÑ Restarting application..."
          pm2 delete sandoria-sandbox || true

          # Start application with PM2
          pm2 start bin/www --name sandoria-sandbox --time
          pm2 save

          # Setup PM2 to run on startup
          sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp /home/$USER

          echo "‚úÖ Deployment completed successfully!"
          echo "üìä Application status:"
          pm2 status
          echo ""
          echo ""
          echo "üìù Useful commands:"
          echo "  pm2 logs sandoria-sandbox    # View logs"
          echo "  pm2 restart sandoria-sandbox # Restart app"
          echo "  pm2 stop sandoria-sandbox    # Stop app"
          echo "  pm2 status                   # Check status"
          DEPLOY_SCRIPT

          chmod +x deploy.sh

          # Copy script to server and execute
          echo "üì§ Uploading deployment script to server..."
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no deploy.sh $SSH_USER@$SSH_HOST:/tmp/deploy.sh

          echo "üîß Executing deployment on server..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "bash /tmp/deploy.sh"

          echo "üéâ Deployment completed!"

      - name: Cleanup
        if: always()
        run: rm -f deploy.sh
