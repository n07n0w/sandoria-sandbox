<html>
<head>

<%
	var categoryImagesPerRow = 3;
	var maxImageWidth  = 100;
	var maxImageHeight = 100;
	var clientMode = (typeof sessionId !== 'undefined' && typeof opponentSessionId !== 'undefined');
	var viewMode = (typeof sessionId !== 'undefined' && typeof opponentSessionId === 'undefined');
%>

<%/*
<link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
*/%>
<link rel="stylesheet" href="/stylesheets/jquery-ui.css">
<link rel="stylesheet" href="/stylesheets/jquery.slidein.css">

<style>
:root {
  --header-height: 20%;
  --right-width-wo-uom: 45;
  --left-width-wo-uom: 25;
  --right-width: calc(var(--right-width-wo-uom) * 1%);
  --left-width: calc(var(--left-width-wo-uom) * 1%);
  --content-width-wo-uom: calc(100 - var(--right-width-wo-uom) - var(--left-width-wo-uom));
  --content-width:  calc(var(--content-width-wo-uom) * 1%);
  --main-height: calc(98% - var(--header-height));
  --border-radius: 25px;
  --top-buttons-middle-width: 70%;
}

body {
	margin: 0;
}

.all {
	position: relative;
	width: 100%;
	height: 100%;
}

.top {
	position: sticky;
	width: 100%;
	height: var(--header-height);
	border-bottom: 1px solid black;
}
.top td {
	border-bottom: 1px solid black;
}
.right {
	width: 20%;
	height: 100%;
	border-left: 1px solid black;
	vertical-align: top;
}
.main {
	height: var(--main-height);
	width: 100%;
	background-color: gray;
	overflow: hidden;
}
.content {
    width: var(--content-width);
    height: 100%;
    overflow-y: scroll;
    padding-right: 17px; /* Increase/decrease this value for cross-browser compatibility */
    box-sizing: content-box; /* So the width will be 100% + 17px */
}
.left {
	width: 15%;
	height: 100%;
	border-right: 1px solid black;
}
#top_menu {
<!--	float: left;-->
}
.top_menu_item {
	width: 80px;
	float: right;
	text-align: center;
	margin: 0 25px;
}
fieldset {
	border: none;
}
.ui-widget input {
    border-radius: var(--border-radius);
    margin: 5px;
    padding: 3px;
    height: 40px;
    text-indent: 10px;
}
.ui-widget.ui-widget-content {
	border: none;
}

#dialog-form, div[aria-describedby="dialog-form"] {
	border-radius: var(--border-radius);
	height: fit-content;
}
.ui-dialog-titlebar {
	background: transparent;
	border: none;
}
#middle {
	width: fit-content;
	margin-left: 100px;
}
#logo {
	width: fit-content;
	float: left;
}
.left_float {
	float: left;
}
.margin_left_20 {
	margin-left: 20px;
}
.topCategory {
	margin: 7px;
	float: left;
	width: 25px;
	height: 25px;
}
.topCategory:hover {
	box-shadow: 0px 2px 4px lightgray;
/*	filter: drop-shadow(0 0 0.75rem crimson);*/
}

.cselected {
	filter: invert(1);
	background-color: #6F899B;
}

.topCategory img {
	width: 25px;
	height: 25px;
}
.images_hidden {
	display: none;
}
.images_hidden td {
	vertical-align: bottom;
}
.category_image {
	max-width: 50px;
	max-height: 100px;
	float: left;
	margin: 10px;
}
#container {
	height: 100%;
}
#iterations {
	width: 100%;
	padding: 10px;
}
.screenshot {
	width: inherit;
}
</style>

<%/*
  <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
  <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
  <!-- https://konvajs.org/docs/index.html -->
  <script src="https://unpkg.com/konva@9/konva.min.js"></script>
*/%>

  <script src="/javascripts/jquery-3.7.1.js"></script>
  <script src="/javascripts/jquery-ui.js"></script>
  <!-- https://konvajs.org/docs/index.html -->
  <script src="/javascripts/konva.min.js"></script>

  <% if (typeof sessionId !== 'undefined') { %>
  <script src="/javascripts/peerjs.min.js"></script>
  <% } %>


	<% if (typeof sessionId !== 'undefined' && typeof opponentSessionId === 'undefined') { %>
	<script src="/javascripts/jquery.slidein.js"></script>
	<% } %>

  <script type="text/javascript">
      var sandboxBackground = "";
      var width = window.innerWidth;
      var height = window.innerHeight;
      var sandboxLayer;
//      var background;
      var transformer;
      var prevCategoryId;
      var myPeer;
      var myConn;
	  var maxImageWidth  = <%=maxImageWidth %>;
	  var maxImageHeight = <%=maxImageHeight %>;
	  var ws;
	  <% if (typeof sessionId !== 'undefined') { %>
	  var sessionId = '<%= sessionId%>';
      <% } else { %>
	  var sessionId = null;
      <% } %>

	  <% if (typeof sessionId !== 'undefined' && typeof opponentSessionId !== 'undefined') { %>
	  var notifyViewer = true;
	  var guest = true;
      <% } else { %>
	  var notifyViewer = false;
	  var guest = false;
      <% } %>

    const sendEvent = function (ev) {
      myConn?.send(ev);
    };

    const notifyImageSelect = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyShapeClick = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyShapeDrag = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyMeDrag = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyTransform = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyRemoveSelected = function (jsonData) {
      sendEvent(jsonData);
    };
    const notifyRemoveAll = function (jsonData) {
      sendEvent(jsonData);
    };
    const notifyCopySelected = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyLevelUp = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifyLevelDown = function (jsonData) {
      sendEvent(jsonData);
    };

    const notifySaveStateToImage = function (jsonData) {
      sendEvent(jsonData);
    };

	const notifySaveStateToImageResponse = function (jsonData) {
      sendEvent(jsonData);
    };

    const imageSelectEvent = function(imgSource, categoryId, imageId) {
      var jsonData = {};
      jsonData['event']      = 'imageSelect';
      jsonData['imgSource']  = imgSource;
      jsonData['categoryId'] = categoryId;
	  jsonData['imageId']    = imageId;
      jsonData['notify']     = false;
      return jsonData;
    };

    const imageSelect = function (jsonObject, notify = false) {
	  loadImage(jsonObject.imgSource, jsonObject.categoryId, jsonObject.imageId);
	  if (notify) {
	    notifyImageSelect(jsonObject);
	  }
	};

    const shapeClick = function(jsonData) {
      console.log(jsonData);
      var node = sandboxLayer.findOne(node => {
        return node.getType() === 'Shape' && node._id == jsonData.shape._id;
      });
      node.fire('click');
    };

    const shapeClickEvent = function (shape) {
      var jsonData = {};
      jsonData['event']  = 'shapeClick';
      var shapeObject = {};
      shapeObject['_id'] = shape._id;
      jsonData['shape']  = shapeObject;
      jsonData['notify'] = false;
      return jsonData;
    };

    const sendCanvasImageToServer = function(data) {
      let cnv = $('canvas')[0];
	  let sessionId = data['sessionId'];
      let dataURL = cnv.toDataURL();
//      let dataURL = cnv.toDataURL('image/svg+xml');
      $.ajax({
        type: "POST",
        url: "/image/".concat(sessionId),
        data: {
          sessionId: sessionId,
          imgBase64: dataURL
        }
      }).done(function(o) {
        console.log('saved');
        var event = saveStateToImageResponseEvent(o);
        notifySaveStateToImageResponse(event);
      });
    };

    const showCanvasImage = function(data) {
		$('#iterations').append(
			$('<img />')
			.attr({ src : '/images/screenshots/'+ data['image']})
			.addClass("screenshot")
		);
    };

    const saveStateToImageEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'sendCanvasImageToServer';
      jsonData['sessionId']  = sessionId;
      jsonData['notify'] = false;
      return jsonData;
    };

    const saveStateToImageResponseEvent = function (imageResponse) {
      var jsonData = {};
      jsonData['event']  = 'showCanvasImage';
      jsonData['sessionId']  = sessionId;
      jsonData['image']  = imageResponse;
      jsonData['notify'] = false;
      return jsonData;
    };

    const removeSelectedEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'removeSelected';
      jsonData['notify'] = false;
      return jsonData;
    };

    const copySelectedEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'copySelected';
      jsonData['notify'] = false;
      return jsonData;
    };

    const removeAllEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'removeAll';
      jsonData['notify'] = false;
      return jsonData;
    };

    const levelUpEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'levelUp';
      jsonData['notify'] = false;
      return jsonData;
    };

    const levelDownEvent = function () {
      var jsonData = {};
      jsonData['event']  = 'levelDown';
      jsonData['notify'] = false;
      return jsonData;
    };

    const shapeDrag = function(jsonData) {
      console.log(jsonData);
      jsonData['nodes'].forEach((nd) => {
        var node = sandboxLayer.findOne(node => {
          return node.getType() === 'Shape' && node._id == nd._id;
        });
        node?.setAttrs({x: nd.x, y: nd.y});
      });
    };

    const meDrag = function(jsonData) {
      console.log(jsonData);
      jsonData['nodes'].forEach((nd) => {
        var node = sandboxLayer.findOne(node => {
          return node.getType() === 'Shape' && node._id == nd._id;
        });
        node?.setAttrs({x: nd.x, y: nd.y});
      });
    };

    const shapeDragEvent = function (evt) {
      var ri = evt.target;
      var jsonData = {};
      jsonData['event']  = 'shapeDrag';
      var nodes = [];
      ri._nodes.forEach((node) => {
        nodes.push({
          _id: node._id,
          x: node.attrs.x,
          y: node.attrs.y})
      });
      jsonData['nodes'] = nodes;
      jsonData['notify'] = false;
      return jsonData;
    };

    const meDragEvent = function (evt) {
      var me = evt.target;
      var jsonData = {};
      jsonData['event']  = 'meDrag';
      var nodes = [];
      nodes.push({
        _id: me._id,
        x: me.attrs.x,
        y: me.attrs.y});
      jsonData['nodes'] = nodes;
      jsonData['notify'] = false;
      return jsonData;
    };

    const transform = function(jsonData) {
//      console.log(jsonData);
      var transform = jsonData['transform'];
      var transformNode = sandboxLayer.findOne(node => {
        return node.getType() === 'Group' && node._id == transform._id;
      });
      transformNode?.setAttrs({
        offsetX:  transform.offsetX,
        offsetY:  transform.offsetY,
        rotation: transform.rotation,
        scaleX:   transform.scaleX,
        scaleY:   transform.scaleY,
        skewX:    transform.skewX,
        skewY:    transform.skewY,
        x:        transform.x,
        y:        transform.y,
      });

      jsonData['nodes'].forEach((nd) => {
        var node = sandboxLayer.findOne(node => {
          return node.getType() === 'Shape' && node._id == nd._id;
        });
        node?.setAttrs({
          rotation: nd.rotation,
          scaleX: nd.scaleX,
          scaleY: nd.scaleY,
          skewX:  nd.skewX,
          skewY:  nd.skewY,
          x:      nd.x,
          y:      nd.y});
      });
    };

    const transformEvent = function (evt) {
      var ri = evt.currentTarget;

      var transform = {
        _id: ri._id,
        offsetX:  ri.attrs.offsetX,
        offsetY:  ri.attrs.offsetY,
        rotation: ri.attrs.rotation,
        scaleX:   ri.attrs.scaleX,
        scaleY:   ri.attrs.scaleY,
        skewX:    ri.attrs.skewX,
        skewY:    ri.attrs.skewY,
        x:        ri.attrs.x,
        y:        ri.attrs.y,
      };

      var jsonData = {};
      jsonData['event']  = 'transform';
      var nodes = [];
      ri._nodes.forEach((node) => {
        nodes.push({
          _id: node._id,
          rotation: node.attrs.rotation,
          scaleX: node.attrs.scaleX,
          scaleY: node.attrs.scaleY,
          skewX: node.attrs.skewX,
          skewY: node.attrs.skewY,
          x:     node.attrs.x,
          y:     node.attrs.y})
      });
      jsonData['nodes'] = nodes;
	  jsonData['transform'] = transform;
      jsonData['notify'] = false;
      return jsonData;
    };
/*
  const processPeerData = function(data) {
    if (typeof data === 'object' && data.hasOwnProperty('event')) {
        try {
          eval(data.event)(data);
        } catch (ex) {
          console.log(ex);
        }
      }
    };
*/
      const calcScaledImageWidthHeight = function(image) {
        var width  = image.width;
        var height = image.height;
        var c  = width / height;
		var c1 = width / maxImageWidth;
		width = width / c1;
		height = width / c;
		if (height > maxImageHeight) {
			c1 = height / maxImageHeight;
			height = height / c1;
			width = height * c;
		}
        return [width, height];
      }

	function loadImage(imgSource, categoryId, imageId) {
		image = new Image();
		image.src = imgSource;
		image.onload = function() {
			var [imgWidth, imgHeight] = calcScaledImageWidthHeight(image);
			var pic = new Konva.Image({
				image: image,
				x: image.x,
				y: image.y,
				width: imgWidth,
				height: imgHeight,
				draggable: true,
			});
			pic.setAttr('category', categoryId);
			pic.setAttr('imgId', imageId);
			pic.on('dragstart', function () {
				this.moveToTop();
			});
/*
			pic.on('click', function () {
				transformer.nodes([pic]);
			});
*/
			pic.on('click', function (evt) {
				let target = evt.target;
				if (window.event.ctrlKey) {
					transformer.nodes().push(pic);
					transformer.forceUpdate();
				} else {
					transformer.nodes([target]);
				}
			});

	//          transformer.nodes().push(pic);
			sandboxLayer.add(pic);
		}
	}

      function removeSelected() {
          transformer.nodes().forEach(function (currentValue, index, arr) {
              currentValue.destroy();
//              arr.splice(index, 1);
          });
          transformer.detach();
          sandboxLayer.draw();
          if (notifyViewer) {
            var event = removeSelectedEvent();
            notifyRemoveSelected(event);
          }
      }

	function copySelected() {
		transformer.nodes().forEach(function (currentValue, index, arr) {
			var clone = currentValue.clone();
			clone.attrs.x += 20;
			clone.attrs.y += 20;
			sandboxLayer.add(clone);
		});
		sandboxLayer.draw();
		if (notifyViewer) {
			var event = copySelectedEvent();
			notifyCopySelected(event);
		}
	}

	function removeAll() {
		var nodes = sandboxLayer.find(node => {
			return 'Image' === node.className;
		});
		nodes.forEach(function (currentValue, index, arr) {
			currentValue.destroy();
//			arr.splice(index, 1);
		});

		transformer.nodes().forEach(function (currentValue, index, arr) {
			currentValue.destroy();
//			arr.splice(index, 1);
		});
		transformer.detach();
		sandboxLayer.draw();
		if (notifyViewer) {
			var event = removeAllEvent();
			notifyRemoveAll(event);
		}
	}

      function levelUp() {
          transformer.nodes().forEach(function (currentValue, index, arr) {
              currentValue.moveUp();
              if (notifyViewer) {
                var event = levelUpEvent();
//                console.log(event);
                notifyLevelUp(event);
              }
          });
      }

      function levelDown() {
          transformer.nodes().forEach(function (currentValue, index, arr) {
              currentValue.moveDown();
              if (notifyViewer) {
                var event = levelDownEvent();
//                console.log(event);
                notifyLevelDown(event);
              }
          });
      }

      function saveStateToImage() {
        var event = saveStateToImageEvent();
        notifySaveStateToImage(event);
      }

      function drawBackground(stage, background, backgroundImg) {
/*
        var context = background.getContext();
        context.drawImage(backgroundImg, 0, 0);
        context.setAttr('font', '20pt Calibri');
        context.setAttr('textAlign', 'center');
        context.setAttr('fillStyle', 'white');
*/

      }

      function initStage() {
        let containerElement = $('#container');
        var stage = new Konva.Stage({
          container: 'container',
          width: containerElement.width(),
          height: containerElement.height(),
        });
//        background = new Konva.Layer();
        sandboxLayer = new Konva.Layer();

        var backgroundImage = new Image();
        backgroundImage.src = "/images/sandbox/sandbox.png";

        var backgroundRect = new Konva.Rect({
          x: 0,
          y: 0,
		  width: containerElement.width(),
		  height: containerElement.height(),
          fillPatternImage: backgroundImage
        });

        transformer = new Konva.Transformer({
          enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],
/*
			borderDash: [4, 3],
			anchorCornerRadius: 5,
			anchorStrokeWidth: 15,
			borderStrokeWidth: 1,
			padding:16,
//			opacity:0,
			anchorFill:"#29A9E5",
			rotationSnaps:[0, 90, 180, 270],
			rotateAnchorOffset: 16,
*/			
		});
//		transformer.anchorSize(20);

/*
		transformer.children.forEach((element) => {
			if ( element.getType() === 'Shape') {
				console.log(element);
				if (element.hasName('top-left')) {
					element.on('click', function(evt) {
						console.log('Delete clicked');
						evt.cancelBubble = true;
					});
				}
				if (element.hasName('top-right')) {
					element.on('click', function(evt) {
						console.log('Flip clicked');
						evt.cancelBubble = true;
					});
				}
			}
		});
*/

        transformer.on('transform', function(evt) {
            if (notifyViewer) {
              var event = transformEvent(evt);
              notifyTransform(event);
            }
        });
        transformer.on('transformstart', function() {
        });
        transformer.on('transformend', function() {
        });
        transformer.on('dragstart', function() {
        });
        transformer.on('dragmove', function(evt) {
            if (notifyViewer) {
              var dragEvent = shapeDragEvent(evt);
              notifyShapeDrag(dragEvent);
            }
        });
        transformer.on('dragend', function() {
        });

        sandboxLayer.add(transformer);

	sandboxLayer.on('mouseover', function() {
	});
	sandboxLayer.on('mousemove', function() {
	});
	sandboxLayer.on('mouseout', function() {
	});
	sandboxLayer.on('mouseenter', function() {
	});
	sandboxLayer.on('mouseleave', function() {
	});
	sandboxLayer.on('mousedown', function() {
	});
	sandboxLayer.on('mouseup', function() {
	});
	sandboxLayer.on('wheel', function() {
	});
	sandboxLayer.on('contextmenu', function() {
	});
	sandboxLayer.on('click', function(evt) {
		var shape = evt.target;
		var group = evt.currentTarget;
		if (notifyViewer) {
			var clickEvent = shapeClickEvent(shape);
			notifyShapeClick(clickEvent);
		}
	});
	sandboxLayer.on('dblclick', function() {
	});
	sandboxLayer.on('touchstart', function() {
	});
	sandboxLayer.on('touchmove', function() {
	});
	sandboxLayer.on('touchend', function() {
	});
	sandboxLayer.on('tap', function() {
	});
	sandboxLayer.on('dbltap', function() {
	});
	sandboxLayer.on('dragstart', function() {
	});
	sandboxLayer.on('dragmove', function(evt) {
		if (notifyViewer) {
			var event = meDragEvent(evt);
			notifyMeDrag(event);
		}

	});
	sandboxLayer.on('dragend', function() {
	});

//        stage.add(background);
        stage.add(sandboxLayer);

//		background.add(backgroundRect);

      var background = new Konva.Rect({
        x: 0,
        y: 0,
        width: stage.width(),
        height: stage.height(),
		fillPatternImage: backgroundImage,
        listening: false,
      });
//	  sandboxLayer.add(background);
  }


/*
	const initWebSocket = functio(sessionId) {
		ws = new WebSocket("wss://localhost:3000/" + sessionId);

		ws.onopen = function(e) {
			alert("[open] З’єднання встановлено");
			alert("Відправка на сервер");
			ws.send("Мене звати Джон");
		};

		ws.onmessage = function(event) {
			alert(`[message] Дані отримані із сервера: ${event.data}`);
		};

		ws.onclose = function(event) {
			if (event.wasClean) {
				alert(`[close] З’єднання закрите чисто, код=${event.code} причина=${event.reason}`);
			} else {
				// наприклад сервер завершив процес або мережа не працює
				// у цьому випадку event.code зазвичай дорівнює 1006
				alert('[close] З’єднання перервано');
			}
		};

		ws.onerror = function(error) {
			alert(`[error]`);
		};
	}
*/

  $( function() {
    var dialog, form,
 
      // From https://html.spec.whatwg.org/multipage/input.html#e-mail-state-%28type=email%29
      emailRegex = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
      name = $( "#name" ),
      email = $( "#email" ),
      password = $( "#password" ),
      allFields = $( [] ).add( name ).add( email ).add( password ),
      tips = $( ".validateTips" );

	<% if (!clientMode && !viewMode && user !== 'undefined') { %>
//		initWebSocket(user.);
	<% } %>
    <% if (typeof sessionId !== 'undefined') { %>

    var launchPeer = function() {
    myPeer = new Peer("<%= sessionId %>");
    myPeer.on('open', function(id) {
      console.log('My peer ID is: ' + id);
      <% if (typeof opponentSessionId !== 'undefined') { %>
      myConn = myPeer.connect('<%= opponentSessionId %>');
      myConn?.on('open', function(){
        console.log(myConn);
        myConn.send('hi!');
      });
      myConn?.on('data', function(data){
//        processPeerData(data);
        if (typeof data === 'object' && data.hasOwnProperty('event'))
        try {
          eval(data.event)(data);
        } catch (ex) {
          console.log(ex);
        }
      });
      myConn?.on('close', function() { 
        // if the clients connection closes set up a reconnect request loop - when the host takes back control
        // the client will auto reconnect...

        myPeer.destroy();   // destroy the link
        connected = false;  // set the connected flag to false
        conn = null;        // destroy the conn
        myPeer = null;      // destroy the peer

        // set a variable which means function calls to launchPeer will not overlap
        var run_next = true;

        // periodically attempt to reconnect
        reconnect_timer = setInterval(function() { 
          if (connected===false && run_next===true) {
            run_next = false;   // stop this bit rerunning before launchPeer has finished...
            if (launchPeer()===true) { 
              clearInterval(reconnect_timer); 
            } else {
              run_next == true;
            }
          }
       }, 1000);

     });

      <% } %>
    });

    myPeer.on('connection', function(conn) {
      console.log(conn);
      myConn = conn;
      conn?.on('data', function(data){
        console.log(data);
//        processPeerData(data);
        if (typeof data === 'object' && data.hasOwnProperty('event'))
        try {
          eval(data.event)(data);
        } catch (ex) {
          console.log(ex);
        }
      });
    });

		return true;
	}; // END OF function launchPeer

	launchPeer();
    const notifyCategorySelect = function (jsonData) {
      sendEvent(jsonData);
    };

    <% } %>

    const selectedCategoryClassName = "cselected";
    const unselectPreviousCategory = function () {
      if (prevCategoryId) {
        $("[cid="+prevCategoryId+"]").removeClass(selectedCategoryClassName);
      }
    }

    const selectCategory = function (categoryId) {
      unselectPreviousCategory();
      $("[cid="+categoryId+"]").addClass(selectedCategoryClassName);
      prevCategoryId = categoryId;
    }

    const categorySelect = function (jsonObject, notify = false) {
      selectCategory(jsonObject['categoryId']);
      showImages(jsonObject['categoryId']);
      if (notify) {
        notifyCategorySelect(jsonObject);
      }
    };

    const categorySelectEvent = function(categoryId, notify) {
      var jsonData = {};
      jsonData['event'] = 'categorySelect';
      jsonData['categoryId'] = categoryId;
      jsonData['notify'] = notify;
      return jsonData;
    };

    function updateTips( t ) {
      tips
        .text( t )
        .addClass( "ui-state-highlight" );
      setTimeout(function() {
        tips.removeClass( "ui-state-highlight", 1500 );
      }, 500 );
    }
 
    function checkLength( o, n, min, max ) {
      if ( o.val().length > max || o.val().length < min ) {
        o.addClass( "ui-state-error" );
        updateTips( "Length of " + n + " must be between " +
          min + " and " + max + "." );
        return false;
      } else {
        return true;
      }
    }
 
    function checkRegexp( o, regexp, n ) {
      if ( !( regexp.test( o.val() ) ) ) {
        o.addClass( "ui-state-error" );
        updateTips( n );
        return false;
      } else {
        return true;
      }
    }
 
    var prevShownCategoryId = "01";
    function showImages(catecory) {
	$("#images_" + prevShownCategoryId).hide();
	prevShownCategoryId = catecory;
	$("#images_" + prevShownCategoryId).show();
    }

    function addUser() {
      var valid = true;
      allFields.removeClass( "ui-state-error" );
 
      valid = valid && checkLength( name, "username", 3, 16 );
      valid = valid && checkLength( email, "email", 6, 80 );
      valid = valid && checkLength( password, "password", 5, 16 );
 
      valid = valid && checkRegexp( name, /^[a-z]([0-9a-z_\s])+$/i, "Username may consist of a-z, 0-9, underscores, spaces and must begin with a letter." );
      valid = valid && checkRegexp( email, emailRegex, "eg. ui@jquery.com" );
      valid = valid && checkRegexp( password, /^([0-9a-zA-Z])+$/, "Password field only allow : a-z 0-9" );
 
      if ( valid ) {
        $( "#users tbody" ).append( "<tr>" +
          "<td>" + name.val() + "</td>" +
          "<td>" + email.val() + "</td>" +
          "<td>" + password.val() + "</td>" +
        "</tr>" );
        dialog.dialog( "close" );
      }
      return valid;
    }

	var imagesRightPanel = $(".right");
	$( ".images_hidden" ).each(function(){
		$(this).remove();
		imagesRightPanel.append($(this));
	});

	$( "#tabs" ).tabs();

    dialog = $( "#dialog-form" ).dialog({
      autoOpen: false,
      height: 400,
      width: 400,
      modal: true,
      close: function() {
        form[ 0 ].reset();
        allFields.removeClass( "ui-state-error" );
      }
    });

    $(".topCategory").on("click", function() {
      var categoryId = $(this).attr("cid");
//	  $(this).addClass('cselected');
      categorySelect(categorySelectEvent(categoryId), true);
    });

    $( "#login" ).on( "click", function() {
      dialog.dialog( "open" );
    });

	initStage();
  } );

  </script>
</head>
<body>
	<table width="100%" height="100%" cellpadding="0" cellspacing="0">
		<tr class="top">
			<td colspan="2" id="top_menu">
				<div id="logo">
					<div style="width: fit-content; float: left;">
						<img src="/images/svg/sandboxLogo.svg">
					</div>
					<div style="text-align: center; float: left;">
						Онлайн песочница<br/>
						<b>Will Free</b>
					</div>
				</div>

				<div id="middle" class="top_menu_item left_float">
					<% if (typeof opponentSessionId === 'undefined') { %>
					<div class="top_menu_item left_float" onclick="saveStateToImage()">
						<span>
							<img src="/images/svg/save.svg">
						</span>
						<span>
							Сохранить
						</span>
					</div>
					<% } %>
					<div class="top_menu_item left_float" onclick="removeAll()">
						<span>
							<img src="/images/svg/clearAll.svg">
						</span>
						<span>
							Очистить все
						</span>
					</div>
<%/*
					<div class="top_menu_item left_float">
						<span>
							<img src="/images/svg/rotateSandbox.svg">
						</span>
						<span>
							Повернуть песочницу
						</span>
					</div>
*/%>
					<div class="top_menu_item left_float margin_left_20" onclick="levelDown()">
						<span>
							<img src="/images/svg/layerUp.svg">
						</span>
						<span>
							На задний план
						</span>
					</div>
					<div class="top_menu_item left_float" onclick="levelUp()">
						<span>
							<img src="/images/svg/layerDown.svg">
						</span>
						<span>
							На передний план
						</span>
					</div>
					<div class="top_menu_item left_float" onclick="copySelected()">
						<span>
							<img src="/images/svg/copy.svg">
						</span>
						<span>
							Копировать
						</span>
					</div>
					<div class="top_menu_item left_float" onclick="removeSelected()">
						<span>
							<img src="/images/svg/remove.svg">
						</span>
						<span>
							Удалить
						</span>
					</div>
				</div>

				<% if (typeof user !== 'undefined') { %>
				<div class="top_menu_item" id="user">
					<span>
						<img src="/images/svg/loggedInUser.svg">
					</span>
					<span>
						<%= user.username %>
					</span>
				</div>
				<% } else if (!clientMode) { %>
				<div class="top_menu_item" id="login">
					<span>
						<img src="/images/svg/login.svg">
					</span>
					<span>
						<a href="">Войти</a>
					</span>
				</div>
				<% } %>
			</td>
			<td id="top_categories" style="border-left: 1px solid black;">
				<%  for (let key in categories){ 
					let category = categories[key];
				%>
					<div class="topCategory" cid="<%= category.id %>">
						<img src="<%= category.icon %>" title="<%= category.title %>" alt="<%= category.title %>"/>
					</div>
					<div id="images_<%= category.id %>" class="images_hidden">
						<table>

					<%
//						for (let image of category.images){ 
						let lastImageIndex = category.images.length - 1;
						for (const [imageIndex, image] of category.images.entries()) {
							console.log(`${imageIndex}: ${image}`);
					%>
						<% if (0 == imageIndex % categoryImagesPerRow) { %>
							<tr>
						<% } %>
						<td>
							<img class="category_image" src="<%= image.image %>" title="<%= image.title %>" onclick="imageSelect(imageSelectEvent(this.src, '<%= category.id %>', '<%= image.id %>'), true)"/>
						</td>
						<% if ((categoryImagesPerRow - 1) == imageIndex % 4 || imageIndex == lastImageIndex) { %>
							</tr>
						<% } %>
					<%  } %>
						</table>
					</div>
				<%  } %>
			</td>
		</tr>
		<tr>
			<td class="left" style="vertical-align: top; padding-top: 20px;">
				<p style="text-align: center;"><b>Сохраненные<br/>итерации</b></p>
				<div id="iterations" />
			</td>
			<td class="sandbox" id="main">
				<div id="container"></div>
			</td>
			<td class="right">
			</td>
		</tr>
	</table>

<div id="dialog-form">
<div id="tabs">
  <ul>
    <li><a href="#tabs-1">Вход</a></li>
    <li><a href="#tabs-2">Регистрация</a></li>
  </ul>
  <div id="tabs-1">
    <form action="/auth" method="POST">
      <fieldset>
        <input type="text" name="email" id="email" class="text ui-widget-content ui-corner-all" placeholder="Введите почту">
        <input type="password" name="password" id="password" class="text ui-widget-content ui-corner-all" placeholder="Введите пароль">

        <!-- Allow form submission with keyboard without duplicating the dialog button -->
        <input type="submit" tabindex="-1" value="Войти в аккаунт">
      </fieldset>
    </form>
  </div>
  <div id="tabs-2">
    <form action="/register" method="POST">
      <fieldset>
        <input type="text" name="name" id="name" class="text ui-widget-content ui-corner-all" placeholder="Ваше имя">
        <input type="text" name="email" id="email" class="text ui-widget-content ui-corner-all" placeholder="Введите почту">
        <input type="password" name="password" id="password" class="text ui-widget-content ui-corner-all" placeholder="Придумйте пароль">

        <!-- Allow form submission with keyboard without duplicating the dialog button -->
        <input type="submit" tabindex="-1" value="Зарегистрироваться">
		<p>Нажимая кнопку "Зарегистрироваться", я даю свое согласие на сбор и обработку моих персональных данных в соответствии с <a href="#" target="blank">Политикой</a> и принимаю условия <a href="#" target="blank">Пользовательствого соглащения</a></p>
      </fieldset>
    </form>
  </div>
</div> 
</div>

</body>
</html>